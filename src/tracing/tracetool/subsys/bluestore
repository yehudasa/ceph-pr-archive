# To add a new tracepoint:
# [disable] <name>(<type1> <arg1>[, <type2> <arg2>] ...) "<format-string>" <log level> <subsys>
#
# Example:
# read(uint64_t offset, size_t length, int r) "Reading %llu ~ %u $d" 10 bluestore
#
# You can use basic types
# Use void* for all pointers
# If you want to use non-basic types, the class needs to implement operator string()
#
# Format string:
# The format string isn't strict and doesn't need to be printf-compliant. The
# type specifier is ignored for dout(), it is only used to format the string
# with the right arguments at the right position.
# For LTTng, use %x to print the argument in hexadecimal a format.
#
# Known issues (fixes coming shortly):
# Not possible to print hex with dout

read_inject_random_eio(int i) ": inject random EIOD" 1
kv_sync_releasing_old_bluefs(byte_u_t bluefs_extents_reclaiming) " releasing old bluefs 0x%s" 0
mkfs(int success) " success (%d)" 0
queue_transactions_blackhole(int i) "objectstore_blackhole = TRUE, dropping transaction" 0
bs_setup_block_symlink_created(string name, string epath) "created %s symlink to %s" 1
bs_setup_block_symlink_resized(string name, byte_u_t size) "resized %s file to %s" 1
mkfs_create(string path) "path %s" 1
mkfs_create_already_created(string path) "already created %s" 1
mkfs_create_using_fsid(uuid fsid, int generated) "fsid %s, generated = %d" 1
mount_path(string path) "path %s" 1
unmount(int i) "bluestore unmount" 1
upgrade_super_start(int32_t ondisk_format, int32_t latest_ondisk_format) "from %d, latest %d" 1
upgrade_super_done(int i) "done" 1
disable_cache_kv(double cache_kv_min_ratio, float cache_kv_ratio) "kv_min_ratio %f > kv_ratio %f" 1
show_cache_sizes(uint64_t cache_size, float cache_meta_ratio, float cache_kv_ratio, float cache_data_ratio) "cache_size %llu meta %f kv %f data %f" 1
disable_bluefs_min(byte_u_t dev_size) "main device size %s is too small, disable bluefs_min for now" 1
open_fm_pre_fragmenting(float debug_prefill, int prefragment_max) "pre-fragmenting freespace, using %f with max free extent %d" 1
opening_allocation_metadata(int i) "opening allocation metadata" 1
open_alloc_loaded_extents(byte_u_t bytes, uint64_t num_extents) "loaded %s in %llu extents" 1
open_db(string kv_backend, string fn, string options) "opened %s path %s options %s" 1
fsck_walking_object_keyspace(int i) "walking object keyspace" 1
fsck_checking_shared_blobs(int i) "checking shared_blobs" 1
fsck_sorting_out_misreferenced_extents(int i) "sorting out misreferenced extents" 1
fsck_checking_for_stray_omap_data(int i) "checking for stray omap data" 1
fsck_checking_deferred_events(int i) "checking deferred events" 1
fsck_checking_freelist_vs_allocated(int i) "checking freelist vs allocated" 1
fsck_finish(int errors, unsigned repaired, int remaining, utime_t seconds) "<<<FINISH>>> with %d errors, %u repared, %d remaining in %s seconds" 1
txc_applied_kv(string onode, int flushing_count) "onode %s had %d" 20
kv_sync_thread_start(int i) "kv_sync_thread start" 20
kv_sync_thread_new_nid_max(int new_nid_max) "new_nid_max %llu" 10
kv_sync_thread_new_blobid_max(int new_blobid_max) "new_blobid_max %llu" 10
kv_sync_thread_nid_max_now(int nid_max_now) "nid_max now %llu" 10
kv_sync_thread_blobid_max_now(int blobid_max_now) "blobid_max now %llu" 10
kv_sync_thread_finish(int i) "kv_sync_thread finish" 10

kv_finalize_thread_start(int i) "kv_finalize_thread start" 10
kv_finalize_thread_sleep(int i) "kv_finalize_thread sleep" 10
kv_finalize_thread_wake(int i) "kv_finalize_thread wake" 10
kv_finalize_thread_finish(int i) "kv_finalize_thread finish" 10

open_db_kv_backend(string kv_backend) "kv_backend = %s" 10
open_db_do_bluefs(int do_bluefs) " do_bluefs = %d" 10

txc_aio_submit(void *txc) "txc %s" 10

txc_add_transaction_coll_hint_noop(uint32_t pg_num, uint64_t num_objs) " collection hint objects is a no-op, pg_num %u num_objects %llu" 10
txc_add_transaction_coll_unknown_hint(uint32_t hint) " unknown collection hint %u" 10
txc_state_proc_name(void *txc, string state_name) " txc %s %s" 10

onodespace_clear(int i) " clear %d" 10
do_write_small(uint64_t offset, uint64_t length) "0x%x~%x" 10
do_write_big(uint64_t offset, uint64_t length, uint64_t target_blob_size, int compress) "0x%x~%x target_blob_size 0x%x compress %d" 10

deferred_aio_finish(void *osr) " osr %s" 10

deferred_replay_start(int i) " start %d" 10
deferred_replay_completed(int events) " completed %d events" 10
queue_transactions(void *c, collectionid cid) " ch %s %s" 10

txc_calc_cost(void *txc, uint64_t txc_cost, uint64_t ios, uint64_t cost, uint64_t txc_bytes) "bluestore._txc_calc_cost %s cost %llu (%llu * %llu + %llu bytes)" 10

write(collectionid cid, ghobject_t oid, uint64_t offset, size_t length, int r) "bluestore._write %s %s 0x%x~%x = %d" 10

omap_setkeys(collection cid, ghobject_t oid, int r) " %s %s = %d" 10
deferred_submit_unlock(void *osr, size_t iomap_size) "osr %s %u ios pending" 10
setattrs(collectionid cid, ghobject_t oid, size_t size, int r) " %s %s %u keys = %d" 10
read(collectionid cid, ghobject_t oid, uint64_t offset, size_t length, int r) " %s %s 0x%x~%x = %d" 10

txc_release_alloc_queued(void *txc, string released) "(queued) %s %s" 10
txc_release_alloc_sync(void *txc, string released) "(sync) %s %s" 10
osr_register_zombie(void *osr) "%s" 10
osr_drain_preceding(void *txc, void *osr) "%s osr %s" 10
osr_drain_preceding_done(void *osr) "%s done" 10
extentmap_reshard(uint32_t needs_reshard_begin, uint32_t needs_reshard_end, size_t extent_map_shards_size, ghobject_t oid) "0x[%x,%x) of %d shards on %s" 10
